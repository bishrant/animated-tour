
// tslint:disable-next-line:max-line-length
export const line1 = [[[-95.118677768330286, 31.068149376982888], [-95.118420276135581, 31.072854453305986], [-95.117991123076564, 31.084542617872309], [-95.115416202027646, 31.094097911045491], [-95.106146487509122, 31.112250321001909], [-95.094387683272146, 31.134586983547326], [-95.09378686845055, 31.135321652987002], [-95.092671069239501, 31.136203249110757], [-95.090525302147896, 31.13759909185589], [-95.088122042861556, 31.139141841879258], [-95.087692889802554, 31.139435696071313], [-95.087092074980973, 31.140023401723724], [-95.086577090591518, 31.140758029051764], [-95.081684741586699, 31.147810161212039], [-95.07790819089459, 31.153098915325515], [-95.076534900387159, 31.155082122425405], [-95.076449069955004, 31.155522829649481]], [[-95.074646625490246, 31.156771487707388], [-95.052845630150571, 31.173663488677356], [-95.039799365838263, 31.183723814022077], [-95.039284381448809, 31.18394410126945], [-95.038855228389806, 31.184531530910665], [-95.009672794326832, 31.206997986855523], [-95.003578814780525, 31.21176958575581], [-94.99782815875939, 31.216173925189693], [-94.997227343937794, 31.216614348079915], [-94.996798190878806, 31.217054768918491], [-94.995854053430349, 31.217495186937224], [-94.995167407278316, 31.217641992999656], [-94.994394931592453, 31.21793560367249], [-94.98392358743078, 31.220724860736762], [-94.983236942177058, 31.220871661783903], [-94.972593936252778, 31.222633251957571], [-94.96881738645898, 31.223293840385008], [-94.967873249010523, 31.223514035501562], [-94.96718660285849, 31.223734230105151], [-94.966585788036909, 31.224101219458973], [-94.965469989724198, 31.224688399768528], [-94.964955005334744, 31.225055386185701], [-94.944269809206091, 31.24919993142478], [-94.943840656147103, 31.249933711648083], [-94.943583163952383, 31.250594108435855], [-94.943239841325507, 31.2512545013726], [-94.943068179562928, 31.252135017335025], [-94.942639026503926, 31.253235650932101], [-94.942381534309206, 31.254336272465853], [-94.938519153184956, 31.262333732764141], [-94.938433322752829, 31.26270057216216], [-94.938004168795516, 31.263067410902135], [-94.937489185304372, 31.263801082568502], [-94.932854327595962, 31.270037067573792], [-94.932167682342239, 31.270623962318481], [-94.930880222266936, 31.271724380316314], [-94.929678592623773, 31.27231126533227], [-94.927961978591128, 31.272898145929368], [-94.879553470237397, 31.290429526066266], [-94.878437671026361, 31.29086960268145], [-94.877493533577919, 31.291089640218665], [-94.875862750875754, 31.29138302254681], [-94.873974475080544, 31.291676403961802], [-94.872086200183659, 31.291896439615812], [-94.868996295643569, 31.29218981943292], [-94.868223819059409, 31.292336508615271], [-94.867451343373546, 31.29255654272843], [-94.866507205925089, 31.292923265364813], [-94.865563067578336, 31.293289985806897], [-94.863760623113578, 31.29424345335374], [-94.862129840411413, 31.295123568151226], [-94.854662570357647, 31.299304003317353], [-94.853718432909218, 31.300037393121602], [-94.851486835385458, 31.301357482228191], [-94.84831109951493, 31.303337579678125], [-94.822733554381458, 31.321009944340506], [-94.821016940348841, 31.321889809107677], [-94.821102771679293, 31.322109774206631], [-94.81114641190706, 31.324309396164267], [-94.810288104890731, 31.324456035340411], [-94.809172305679709, 31.324456035340411], [-94.798185977128568, 31.324529355610242], [-94.797070178815858, 31.32467599444384], [-94.796126041367401, 31.324822633816414], [-94.795010242156366, 31.325115911108888], [-94.788572939983212, 31.327242144731478], [-94.780075702048862, 31.33002817166388], [-94.779303226362998, 31.330321432738632], [-94.778187427151963, 31.330614692899747], [-94.7769857975088, 31.330907952914394], [-94.775011691281449, 31.331127896174777], [-94.760248812936524, 31.332814116133431]]];
// tslint:disable-next-line:max-line-length
// export const line2 = [[-95.118677768330286, 31.068149376982888], [-95.118420276135581, 31.072854453305986], [-95.117991123076564, 31.084542617872309], [-95.115416202027646, 31.094097911045491], [-95.106146487509122, 31.112250321001909], [-95.094387683272146, 31.134586983547326], [-95.09378686845055, 31.135321652987002], [-95.092671069239501, 31.136203249110757], [-95.090525302147896, 31.13759909185589], [-95.088122042861556, 31.139141841879258], [-95.087692889802554, 31.139435696071313], [-95.087092074980973, 31.140023401723724], [-95.086577090591518, 31.140758029051764], [-95.081684741586699, 31.147810161212039], [-95.07790819089459, 31.153098915325515], [-95.076534900387159, 31.155082122425405], [-95.076449069955004, 31.155522829649481]];

export const labels = ['place 1', 'place 2', 'place 3'];

export const lineGraphicSymbol = {
    type: 'simple-line',
    color: [150, 119, 40],
    width: 1
};
export const markerSymbol = {
    type: 'simple-marker', // autocasts as new SimpleMarkerSymbol()
    color: [226, 119, 40],
    outline: { // autocasts as new SimpleLineSymbol()
        color: [255, 255, 255],
        width: 2
    }
};

export const highLightedLineSymbol = {
    type: 'simple-line',
    color: [226, 119, 40],
    width: 2
};

function _distanceBetweenPoints(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + (Math.pow(y2 - y1, 2)));
}


export function getPointAlongLine(polyline, distance, pathIndex) {
    if ((pathIndex >= 0) && (pathIndex <= polyline.paths.length)) {
        const path = polyline.paths[pathIndex];
        let x1, x2, x3, y1, y2, y3;
        let travelledDistance = 0;
        let pathDistance;
        let distanceDiff;
        let angle;
        if (distance === 0) {
            return polyline.getPoint(pathIndex, 0);
        } else if (distance > 0) {
            for (let i = 1; i < path.length; i++) {
                x1 = path[i - 1][0];
                y1 = path[i - 1][1];
                x2 = path[i][0];
                y2 = path[i][1];
                pathDistance = _distanceBetweenPoints(x1, y1, x2, y2);
                travelledDistance += pathDistance;
                if (travelledDistance === distance) {
                    return polyline.getPoint(pathIndex, i);
                } else if (travelledDistance > distance) {
                    distanceDiff = pathDistance - (travelledDistance - distance);
                    angle = Math.atan2(y2 - y1, x2 - x1);
                    x3 = distanceDiff * Math.cos(angle);
                    y3 = distanceDiff * Math.sin(angle);
                    return [x1 + x3, y1 + y3];
                    // return new Point(x1 + x3, y1 + y3, polyline.spatialReference);
                }
            }
        }
    }
    return null;
}
